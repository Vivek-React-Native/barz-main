import { Fragment, useState, useCallback, useContext, useEffect } from 'react';
import { Text, SafeAreaView, View, Pressable, Keyboard, StyleSheet } from 'react-native';
import { showMessage } from 'react-native-flash-message';
import { StatusBar } from 'expo-status-bar';
import { useSignUp, useSignIn, useUser } from '@clerk/clerk-expo';
import { UserDataContext } from '@barz/mobile/src/user-data';
import { useFocusEffect } from '@react-navigation/native';

import Button from '@barz/mobile/src/ui/Button';
import { Color, Typography } from '@barz/mobile/src/ui/tokens';
import { ArrowRight as IconArrowRight } from '@barz/mobile/src/ui/icons';
import { FixMe } from '@barz/mobile/src/lib/fixme';

import VerificationCodeBox from '@barz/mobile/src/components/VerificationCodeBox';

import OnboardingContext from './context';
// ref: https://stackoverflow.com/a/75142476/4115328
import { PageProps } from '.';

const styles = StyleSheet.create({
  wrapper: {
    height: '100%',
    paddingLeft: 16,
    paddingRight: 16,
  },

  verificationCodeIntroHeader: {
    ...Typography.Heading1,
    color: Color.White,
    marginTop: 16,
  },
  verificationCodeIntroBody: {
    ...Typography.Body1,
    color: Color.Gray.Dark11,
    marginTop: 24,
  },
  verificationCodeForm: {
    marginTop: 48,
  },

  verificationCodeResendForm: {
    flexDirection: 'row',
    alignItems: 'center',
    height: 32,
    marginTop: 24,
  },
  verificationCodeResendFormIntro: {
    ...Typography.Body2,
    color: Color.Gray.Dark11,
  },
  verifyCodeButtonWrapper: {
    flexDirection: 'row',
    width: '100%',
    marginTop: 24,
  },
});

const LoginVerifyCode: React.FunctionComponent<
  PageProps<'Onboarding > Verify Code'> & {
    loading: boolean;
    onChangeLoading: (newLoading: boolean) => void;
    needsToViewAutoGeneratedRapName: boolean;
  }
> = ({ navigation, loading, onChangeLoading, needsToViewAutoGeneratedRapName }) => {
  const { isLoaded: isSignUpLoaded, signUp, setActive: setSignUpActive } = useSignUp();
  const { isLoaded: isSignInLoaded, signIn, setActive: setSignInActive } = useSignIn();

  const { onboardingContextData } = useContext(OnboardingContext);
  const [_userMe, _updateUserMe, forceReloadUserMe] = useContext(UserDataContext);
  const { isSignedIn } = useUser();

  const [code, setCode] = useState('');

  const [focused, setFocused] = useState(false);
  useFocusEffect(
    useCallback(() => {
      setFocused(true);
      return () => setFocused(false);
    }, []),
  );

  // When the verify page is initially shown, make sure that the loading state starts disabled
  useFocusEffect(
    useCallback(() => {
      onChangeLoading(false);
    }, [onChangeLoading]),
  );

  // This verifies the user using email code that is delivered, and forces the user data to reload
  const onPressVerify = useCallback(
    async (code: string) => {
      if (loading) {
        return;
      }
      onChangeLoading(true);

      if (!isSignedIn) {
        switch (onboardingContextData.mode) {
          case 'SIGN_IN':
            if (!isSignInLoaded) {
              return;
            }

            let completeSignIn;
            try {
              // Attempt to verify the user's phone number by
              // providing the one-time code they received.
              completeSignIn = await signIn.attemptFirstFactor({ strategy: 'phone_code', code });
              console.log('Verified user!', JSON.stringify(completeSignIn, null, 2));

              // Assuming that succeeded, then mark this user as having successfully signed in!
              await setSignInActive({ session: completeSignIn.createdSessionId });
            } catch (err: FixMe) {
              console.log(`Error verifying sign in code:`, JSON.stringify(err));
              showMessage({
                message: 'Error verifying sign in code:',
                description: JSON.stringify(err, null, 2),
                type: 'warning',
              });
              onChangeLoading(false);
              return;
            }
            break;

          case 'SIGN_UP':
            if (!isSignUpLoaded) {
              return;
            }

            try {
              // Attempt to verify the user's phone number by
              // providing the one-time code they received.
              const completeSignUp = await signUp.attemptPhoneNumberVerification({ code });
              console.log('Verified user!', JSON.stringify(completeSignUp, null, 2));

              if ((completeSignUp as FixMe).missingFields.length > 0) {
                throw new Error(
                  `Unable to complete sign in, fields are missing: ${completeSignUp.missingFields.join(
                    ', ',
                  )}`,
                );
              }

              // Assuming that succeeded, then mark this user as having successfully signed in!
              await setSignUpActive({ session: completeSignUp.createdSessionId });
            } catch (err: FixMe) {
              console.log(`Error verifying sign up code:`, JSON.stringify(err));
              showMessage({
                message: 'Error verifying sign up code:',
                description: JSON.stringify(err, null, 2),
                type: 'warning',
              });
              onChangeLoading(false);
              return;
            }
            break;

          default:
            console.log(`ERROR: unknown onboarding mode ${onboardingContextData.mode}`);
            onChangeLoading(false);
            return;
        }
      }

      // After signing in successfully, reload the user data. Note that `loading` is still true
      // here - once the user has successfully been reloaded, the root onboarding view will see that
      // the user has logged in and render the main app content rather than the onboarding workflow
      forceReloadUserMe();
    },
    [
      isSignInLoaded,
      signIn,
      setSignInActive,
      isSignUpLoaded,
      signUp,
      isSignedIn,
      setSignUpActive,
      loading,
      onChangeLoading,
      forceReloadUserMe,
    ],
  );

  const [resendLoading, setResendLoading] = useState(false);
  const onResendCode = async () => {
    setResendLoading(true);

    try {
      switch (onboardingContextData.mode) {
        case 'SIGN_UP':
          if (isSignUpLoaded) {
            await signUp.preparePhoneNumberVerification();
          }
          break;

        case 'SIGN_IN':
          if (isSignInLoaded) {
            // Prepare first factor verification, specifying the phone code strategy.
            await signIn.prepareFirstFactor({
              strategy: 'phone_code',
              phoneNumberId: onboardingContextData.phoneNumberId,
            });
          }
          break;
      }
    } catch (err) {
      console.log(`Error resending code:`, err);
      showMessage({
        message: 'Error resending code:',
        description: JSON.stringify(err, null, 2),
        type: 'warning',
      });
      return;
    } finally {
      setResendLoading(false);
    }
  };

  const onSubmitCode = useCallback(
    (code: string) => {
      setCode(code);
      onPressVerify(code);
    },
    [setCode, onPressVerify],
  );

  // If the auto generated rap name screen needs to be shown at the very end, then show it
  useEffect(() => {
    if (!focused) {
      return;
    }
    if (!needsToViewAutoGeneratedRapName) {
      return;
    }
    navigation.push('Onboarding > Create Rap Name Intro');
  }, [focused, needsToViewAutoGeneratedRapName]);

  return (
    <Fragment>
      <StatusBar style="light" />
      <SafeAreaView>
        <Pressable onPress={Keyboard.dismiss} style={styles.wrapper}>
          <Text style={styles.verificationCodeIntroHeader}>Enter 6-digit code</Text>
          <Text style={styles.verificationCodeIntroBody}>
            We sent a 6 digit code to you at{' '}
            {onboardingContextData.mode !== null ? onboardingContextData.rawPhoneNumber : null}
          </Text>

          <View style={styles.verificationCodeForm} testID="onboarding-verify-code-page">
            <VerificationCodeBox
              code={code}
              onChangeCode={setCode}
              autoFocus
              numberOfCharacters={6}
              onSubmitCode={onSubmitCode}
              testID="onboarding-otp"
            />

            <View style={styles.verificationCodeResendForm}>
              <Text style={styles.verificationCodeResendFormIntro}>Didn't receive code?</Text>
              {!loading ? (
                <Button
                  size={32}
                  type="text"
                  color={Color.Brand.Yellow}
                  onPress={onResendCode}
                  disabled={resendLoading}
                >
                  {resendLoading ? 'Resending...' : 'Resend code'}
                </Button>
              ) : null}
            </View>
            <View style={styles.verifyCodeButtonWrapper}>
              <Button
                size={56}
                type="secondary"
                onPress={() => onPressVerify(code)}
                disabled={code.length !== 6 || loading}
                trailing={(color) => <IconArrowRight color={color} />}
                testID="onboarding-verify-button"
                flexGrow={1}
              >
                {loading ? 'Loading...' : 'Verify Code'}
              </Button>
            </View>
          </View>
        </Pressable>
      </SafeAreaView>
    </Fragment>
  );
};

export default LoginVerifyCode;
